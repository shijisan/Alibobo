datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int       @id @default(autoincrement())
  username         String    @unique
  email            String    @unique
  phoneNumber      String
  password         String
  role             Role      @default(BUYER) // Role can be BUYER or SELLER
  profilePicture   String?   // Optional profile picture
  seller           Seller?   // One-to-one relation with seller (optional)
  images           Image[]   // One-to-many relation with images
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  admins           Admin[]   // List of admins linked to this user
}

model Admin {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique // Link to the User
  user        User     @relation(fields: [userId], references: [id]) // Relation to User
  email       String   @unique
  role        Role     @default(ADMIN) // Role set to ADMIN
  createdById Int?     // ID of the admin who created this admin
  createdBy   Admin?   @relation("CreatedAdmins", fields: [createdById], references: [id]) // Relation to track the creator
  createdAdmins Admin[] @relation("CreatedAdmins") // List of admins created by this admin
  createdAt   DateTime @default(now()) // Default value set to now()
  updatedAt   DateTime @updatedAt @default(now()) // Fix: Add default value to updatedAt
}

model Seller {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
  shopName        String
  shopDescription String?
  shopProfilePic  String? // Optional shop profile picture
  idImage         String  // ID image required for verification
  verified        Boolean @default(false) // To be updated by admin
  products        Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  seller      Seller    @relation(fields: [sellerId], references: [id])
  sellerId    Int
  name        String
  description String?
  price       Float
  stock       Int
  images      Image[]   // One-to-many relation with Image table
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

enum Role {
  BUYER
  SELLER
  ADMIN
}
